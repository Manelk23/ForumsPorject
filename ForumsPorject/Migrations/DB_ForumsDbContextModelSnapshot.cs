// <auto-generated />
using System;
using ForumsPorject.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForumsProject.Migrations
{
    [DbContext(typeof(DB_ForumsDbContext))]
    partial class DB_ForumsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AppRoleUtilisateur", b =>
                {
                    b.Property<int>("AppRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("AppRoleId", "UtilisateurId");

                    b.ToTable("AppRoleUtilisateur");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.AppRole", b =>
                {
                    b.Property<int>("AppRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppRoleId"), 1L, 1);

                    b.Property<string>("ManagerRole")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SimpleRole")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AppRoleId");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Category", b =>
                {
                    b.Property<int>("CategorieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categorie_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategorieId"), 1L, 1);

                    b.Property<string>("DescriptionCategorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description_categorie");

                    b.Property<string>("TitreCategorie")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("titre_categorie");

                    b.HasKey("CategorieId")
                        .HasName("categorie_pk");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Discussion", b =>
                {
                    b.Property<int>("DiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("discussion_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscussionId"), 1L, 1);

                    b.Property<DateTime>("DateCreationDiscussion")
                        .HasColumnType("date")
                        .HasColumnName("dateCreation_discussion");

                    b.Property<int?>("Themeid")
                        .HasColumnType("int")
                        .HasColumnName("themeid");

                    b.Property<string>("TitreDiscussion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("titre_discussion");

                    b.Property<int?>("Utilisateurid")
                        .HasColumnType("int")
                        .HasColumnName("utilisateurid");

                    b.HasKey("DiscussionId");

                    b.HasIndex("Utilisateurid");

                    b.HasIndex(new[] { "Themeid" }, "IX_discussions_themeid");

                    b.ToTable("discussions");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Forum", b =>
                {
                    b.Property<int>("ForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("forum_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForumId"), 1L, 1);

                    b.Property<int>("Categorieid")
                        .HasColumnType("int")
                        .HasColumnName("categorieid");

                    b.Property<DateTime>("DateCreationForum")
                        .HasColumnType("date")
                        .HasColumnName("dateCreation_forum");

                    b.Property<string>("DiscriptionForum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("discription_forum");

                    b.Property<string>("TitreForum")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("titre_forum");

                    b.HasKey("ForumId");

                    b.HasIndex(new[] { "Categorieid" }, "IX_forums_categorieid");

                    b.ToTable("forums");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Message", b =>
                {
                    b.Property<int>("MessagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("messages_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessagesId"), 1L, 1);

                    b.Property<bool>("Archive")
                        .HasColumnType("bit")
                        .HasColumnName("archive");

                    b.Property<int>("AuteurId")
                        .HasColumnType("int")
                        .HasColumnName("auteur_id");

                    b.Property<string>("ContenuMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contenu_message");

                    b.Property<DateTime>("DatecréationMessage")
                        .HasColumnType("date")
                        .HasColumnName("datecréation_message");

                    b.Property<int>("Discussionid")
                        .HasColumnType("int")
                        .HasColumnName("discussionid");

                    b.Property<bool>("Lu")
                        .HasColumnType("bit")
                        .HasColumnName("lu");

                    b.HasKey("MessagesId")
                        .HasName("message_pk");

                    b.HasIndex(new[] { "AuteurId" }, "IX_messages_auteur_id");

                    b.HasIndex(new[] { "Discussionid" }, "IX_messages_discussionid");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Theme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("theme_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThemeId"), 1L, 1);

                    b.Property<DateTime>("DateCreationTheme")
                        .HasColumnType("date")
                        .HasColumnName("dateCreation_theme");

                    b.Property<int>("Forumid")
                        .HasColumnType("int")
                        .HasColumnName("forumid");

                    b.Property<string>("TitreTheme")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("titre_theme");

                    b.HasKey("ThemeId");

                    b.HasIndex(new[] { "Forumid" }, "IX_themes_forumid");

                    b.ToTable("themes");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Utilisateur", b =>
                {
                    b.Property<int>("UtilisateurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("utilisateur_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtilisateurId"), 1L, 1);

                    b.Property<bool?>("Actif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("actif")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Cheminavatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("cheminavatar");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("Inscrit")
                        .HasColumnType("bit")
                        .HasColumnName("inscrit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Pseudonyme")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pseudonyme");

                    b.Property<string>("Signature")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("signature");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit")
                        .HasColumnName("valid");

                    b.HasKey("UtilisateurId");

                    b.ToTable("utilisateurs");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.UtilisateurRole", b =>
                {
                    b.Property<int>("UtilisateurID")
                        .HasColumnType("int");

                    b.Property<int>("AppRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("UtilisateurID", "AppRoleId");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("UtilisateurRoles");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Discussion", b =>
                {
                    b.HasOne("ForumsPorject.Repository.Entites.Theme", "Theme")
                        .WithMany("Discussions")
                        .HasForeignKey("Themeid")
                        .HasConstraintName("FK_discussions_themes");

                    b.HasOne("ForumsPorject.Repository.Entites.Utilisateur", "Utilisateur")
                        .WithMany("Discussions")
                        .HasForeignKey("Utilisateurid")
                        .HasConstraintName("FK_discussions_utilisateurs");

                    b.Navigation("Theme");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Forum", b =>
                {
                    b.HasOne("ForumsPorject.Repository.Entites.Category", "Categorie")
                        .WithMany("Forums")
                        .HasForeignKey("Categorieid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("forum_categorie_id_fk");

                    b.Navigation("Categorie");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Message", b =>
                {
                    b.HasOne("ForumsPorject.Repository.Entites.Utilisateur", "Auteur")
                        .WithMany("Messages")
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_auteur_id_fk");

                    b.HasOne("ForumsPorject.Repository.Entites.Discussion", "Discussion")
                        .WithMany("Messages")
                        .HasForeignKey("Discussionid")
                        .IsRequired()
                        .HasConstraintName("message_discussion_id_fk");

                    b.Navigation("Auteur");

                    b.Navigation("Discussion");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Theme", b =>
                {
                    b.HasOne("ForumsPorject.Repository.Entites.Forum", "Forum")
                        .WithMany("Themes")
                        .HasForeignKey("Forumid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("thème_forum_id_fk");

                    b.Navigation("Forum");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.UtilisateurRole", b =>
                {
                    b.HasOne("ForumsPorject.Repository.Entites.AppRole", "AppRole")
                        .WithMany("UtilisateurRoles")
                        .HasForeignKey("AppRoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UtilisateurRoles_AppRoleId");

                    b.HasOne("ForumsPorject.Repository.Entites.Utilisateur", "Utilisateur")
                        .WithMany("UtilisateurRoles")
                        .HasForeignKey("UtilisateurID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForumsPorject.Repository.Entites.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .IsRequired()
                        .HasConstraintName("FK_UtilisateurRoles_UtilisateurId");

                    b.Navigation("AppRole");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.AppRole", b =>
                {
                    b.Navigation("UtilisateurRoles");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Category", b =>
                {
                    b.Navigation("Forums");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Discussion", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Forum", b =>
                {
                    b.Navigation("Themes");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Theme", b =>
                {
                    b.Navigation("Discussions");
                });

            modelBuilder.Entity("ForumsPorject.Repository.Entites.Utilisateur", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Messages");

                    b.Navigation("UtilisateurRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
